/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import ModeloBeans.BeansLogin;
import ModeloBeans.BeansPetiscos;
import ModeloBeans.BeansVendaPetiscos;
import ModeloConection.ConexaoBD;
import ModeloDAO.DAOPetiscos;
import ModeloDAO.DAOVendaPetiscos;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author MARCOS RICHARD
 */
public class CompraPetiscos extends javax.swing.JFrame {

    /**
     * Creates new form CompraPetiscos
     */
    float soma;
    BeansVendaPetiscos user = new BeansVendaPetiscos();
    DAOVendaPetiscos control = new DAOVendaPetiscos();
    ConexaoBD conexao = new ConexaoBD();
    public CompraPetiscos() {
         try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(CadastroFuncionario.class.getName()).log(Level.SEVERE, null, ex);
        }
         
        initComponents();
        
        dataCompra();
        BeansLogin l = new BeansLogin();
        String credito = "" + l.getCredito();
        saldoMostrar.setText(credito);
        comprar.setEnabled(false);
        cancelar.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTablePesquisa = new javax.swing.JTable();
        novo = new javax.swing.JButton();
        comprar = new javax.swing.JButton();
        sair = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        id = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        nome = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        descricao = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        cancelar = new javax.swing.JButton();
        valor = new javax.swing.JTextField();
        quantidade = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        dataCompra = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        saldoMostrar = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        setForeground(java.awt.Color.black);
        getContentPane().setLayout(null);

        jTablePesquisa.setBackground(new java.awt.Color(0, 0, 0));
        jTablePesquisa.setForeground(new java.awt.Color(255, 255, 255));
        jTablePesquisa.setModel(tmPetiscos);
        jTablePesquisa.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTablePesquisaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTablePesquisa);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(330, 20, 390, 270);

        novo.setText("Novo");
        novo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                novoActionPerformed(evt);
            }
        });
        getContentPane().add(novo);
        novo.setBounds(60, 250, 200, 50);

        comprar.setText("Comprar");
        comprar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comprarActionPerformed(evt);
            }
        });
        getContentPane().add(comprar);
        comprar.setBounds(60, 310, 200, 50);

        sair.setText("Sair");
        sair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sairActionPerformed(evt);
            }
        });
        getContentPane().add(sair);
        sair.setBounds(60, 430, 200, 50);

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Id:");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(430, 300, 14, 14);

        id.setEditable(false);
        getContentPane().add(id);
        id.setBounds(460, 300, 35, 20);

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Nome:");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(420, 330, 31, 14);

        nome.setEditable(false);
        getContentPane().add(nome);
        nome.setBounds(460, 330, 161, 20);

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Descrição:");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(400, 360, 50, 14);

        descricao.setEditable(false);
        getContentPane().add(descricao);
        descricao.setBounds(460, 360, 217, 20);

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Quantidade:");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(390, 390, 60, 14);

        cancelar.setText("Cancelar");
        cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarActionPerformed(evt);
            }
        });
        getContentPane().add(cancelar);
        cancelar.setBounds(60, 370, 200, 50);

        valor.setEditable(false);
        getContentPane().add(valor);
        valor.setBounds(460, 420, 90, 20);
        getContentPane().add(quantidade);
        quantidade.setBounds(460, 390, 70, 20);

        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Data da Compra:");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(360, 450, 82, 14);

        dataCompra.setEditable(false);
        dataCompra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dataCompraActionPerformed(evt);
            }
        });
        getContentPane().add(dataCompra);
        dataCompra.setBounds(460, 450, 90, 20);

        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Valor Unidade (R$):");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(360, 420, 94, 14);

        saldoMostrar.setEditable(false);
        saldoMostrar.setBackground(new java.awt.Color(0, 51, 204));
        saldoMostrar.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        saldoMostrar.setForeground(new java.awt.Color(255, 255, 255));
        saldoMostrar.setBorder(null);
        saldoMostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saldoMostrarActionPerformed(evt);
            }
        });
        getContentPane().add(saldoMostrar);
        saldoMostrar.setBounds(80, 10, 160, 50);

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Saldo:");
        jLabel8.setToolTipText("");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(10, 20, 60, 22);

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/Fundo Compra Petiscos.jpg"))); // NOI18N
        jLabel9.setText("jLabel9");
        jLabel9.setToolTipText("");
        getContentPane().add(jLabel9);
        jLabel9.setBounds(0, 0, 740, 510);

        setSize(new java.awt.Dimension(755, 543));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void comprarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comprarActionPerformed
       try {
           if(verificaDados()){
                BeansLogin l = new BeansLogin();
                user.setNome(l.getNome());
                user.setCpf(l.getLogin());
                user.setDescricao(descricao.getText());
                user.setNomeIng(nome.getText());

                float valoro = Float.parseFloat(valor.getText());
                int quantidadeo = Integer.parseInt(quantidade.getText());
                soma = valoro*quantidadeo;
                user.setQuantidade(Integer.parseInt(quantidade.getText()));
                user.setDataCompra(salvaDataCompra());
                user.setValor(soma);
                float credito = l.getCredito();
                limpaCampos();
                if (credito >= soma){
                    int resp = JOptionPane.showConfirmDialog(rootPane, "Deseja realmente comprar este produto? O total é de "+soma,
                        "Confirmação!", JOptionPane.YES_NO_OPTION);
                    if (resp == JOptionPane.YES_NO_OPTION) {
                        l.setCredito(atualizaSaldo(l.getLogin()));
                        String credito1 = "" + l.getCredito();
                        saldoMostrar.setText(credito1);
                        control.Salvar(user);
                    }
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Desculpe! Saldo Insuficiente!");
                }
           }else{
               JOptionPane.showMessageDialog(rootPane, "Desculpe! Dados incompletos!");
           }

        } catch (SQLException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null,"ERRO Ao Inserir Dados!\nErro: "+ex);
        }
    }//GEN-LAST:event_comprarActionPerformed

    private void sairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sairActionPerformed
       TelaPrincipal3 tela = new TelaPrincipal3();
       tela.setVisible(true);
       dispose();
    }//GEN-LAST:event_sairActionPerformed

    private void jTablePesquisaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTablePesquisaMouseClicked
        int linhaSelecionada = jTablePesquisa.getSelectedRow();
        id.setText(jTablePesquisa.getValueAt(linhaSelecionada, 0).toString());
        nome.setText(jTablePesquisa.getValueAt(linhaSelecionada, 1).toString());
        descricao.setText(jTablePesquisa.getValueAt(linhaSelecionada, 2).toString());
        valor.setText(jTablePesquisa.getValueAt(linhaSelecionada, 3).toString());
        
    }//GEN-LAST:event_jTablePesquisaMouseClicked

    private void cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarActionPerformed
        limpaCampos();
        limparTabela();
        comprar.setEnabled(false);
    }//GEN-LAST:event_cancelarActionPerformed

    private void novoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_novoActionPerformed
        try {
            listaContatos();
            comprar.setEnabled(true);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, "Problemas ao listar Funcionarios.\n"+ex);
        }
    }//GEN-LAST:event_novoActionPerformed

    private void dataCompraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dataCompraActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dataCompraActionPerformed

    private void saldoMostrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saldoMostrarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_saldoMostrarActionPerformed

    DefaultTableModel tmPetiscos = new DefaultTableModel(null, new String[]{"Id", "Nome", "Descricao","Valor"});
    List<BeansPetiscos> petiscos;
    
    private void listaContatos() throws SQLException {
        limpaCampos();
        DAOPetiscos c = new DAOPetiscos();
        petiscos = c.getLista("%"); 
        
        // Após pesquisar os contatos, executa o método p/ exibir o resultado na tabela pesquisa
        mostraPesquisa(petiscos);
        petiscos.clear();
    }
    
    private Float atualizaSaldo(String login){
            BeansLogin s = new BeansLogin();
            float saldo = s.getCredito();
            saldo -= soma;
            return saldo;    
    }
    
    private void mostraPesquisa(List<BeansPetiscos> petiscos) {
        // Limpa a tabela sempre que for solicitado uma nova pesquisa
        limparTabela();
        
        if (petiscos.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Nenhum registro encontrado.");
        } else {            
            // Linha em branco usada no for, para cada registro é criada uma nova linha 
            String[] linha = new String[] {null, null, null, null, null, null, null, null, null, null, null};
            // P/ cada registro é criada uma nova linha, cada recebe linha os campos do registro
            for (int i = 0; i < petiscos.size(); i++) {
                tmPetiscos.addRow(linha);
                tmPetiscos.setValueAt(petiscos.get(i).getId(), i, 0);
                tmPetiscos.setValueAt(petiscos.get(i).getNome(), i, 1);
                tmPetiscos.setValueAt(petiscos.get(i).getDescricao(), i, 2);
                tmPetiscos.setValueAt(petiscos.get(i).getValor(), i, 3);

            }            
        }
    }
    
     private void dataCompra(){
        
        Date data = new Date();  
        
        SimpleDateFormat formataData = new SimpleDateFormat("dd/MM/yyyy HH:mm");  
        String s = formataData.format( data ); 
        
        dataCompra.setText(formataData.format(data));
    }
     private String salvaDataCompra() {
        Date data = new Date();  
        
        SimpleDateFormat formataData = new SimpleDateFormat("yyyy-MM-dd HH:mm");  
        String dataEmprestimoFormatada = formataData.format(data); 
        
        return dataEmprestimoFormatada;   
    }  
    
    private void limparTabela() {       
        while (tmPetiscos.getRowCount() > 0) {            
            tmPetiscos.removeRow(0);
        }
    }
    
    private void desabilitaCampos() {
        id.setEditable(false);
        nome.setEditable(false);
        descricao.setEditable(false);
        valor.setEditable(false);
    }
    
     private void habilitaCampos() {
        nome.setEditable(true);
        valor.setEditable(true);
        descricao.setEditable(true);
    }
     
     private void limpaCampos() {
        id.setText("");
        nome.setText("");
        valor.setText("");
        descricao.setText("");
        quantidade.setText("");
    }
    
    private boolean verificaDados() {
        if ((!descricao.getText().equals(""))&&
           (!nome.getText().equals("")) && (!quantidade.getText().equals(""))&&
            (!id.getText().equals(""))){            
            return true;
        }
        JOptionPane.showMessageDialog(rootPane, "Senhas Diferentes.");
        return false;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CompraPetiscos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CompraPetiscos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CompraPetiscos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CompraPetiscos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CompraPetiscos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelar;
    private javax.swing.JButton comprar;
    private javax.swing.JTextField dataCompra;
    private javax.swing.JTextField descricao;
    private javax.swing.JTextField id;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTablePesquisa;
    private javax.swing.JTextField nome;
    private javax.swing.JButton novo;
    private javax.swing.JTextField quantidade;
    private javax.swing.JButton sair;
    private javax.swing.JTextField saldoMostrar;
    private javax.swing.JTextField valor;
    // End of variables declaration//GEN-END:variables
}
